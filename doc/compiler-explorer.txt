*compiler-explorer.txt* Lua plugin for compiler-explorer
*compiler-explorer.nvim*

Author: Bogdan Grigoruță <bogdangrigoruta@gmail.com>
Homepage: <https://github.com/krady21/compiler-explorer.nvim>
License: MIT License

==============================================================================
INTRODUCTION                                               *compiler-explorer*

This plugin uses the exposed REST API endpoints provided by compiler-explorer
in order to allow the user to compile, format and inspect assembly directly
from neovim. The compiles are done asynchronously, with the help of |vim.loop|
and curl.

==============================================================================
COMMANDS                                          *compiler-explorer-commands*

                                                                  
:CECompile {args}                                                 *:CECompile*
                        Compile the source code found in the current buffer
                        using <https://godbolt.org/> or a local instance and
                        dump the assembly output to a new window.

                        Options:
                        • compiler={compiler-id} compiler•id as received from
                          <https://godbolt.org/api/compilers>, can be tab
                          completed. If not specified, the user will be
                          prompted to select it interactively using *vim.ui.select*.

                        • flags={compiler-flags} Compiler flags
                          comma•separated.

                        • inferLang={true/false} If true, infer the language
                          based on file extension, otherwise prompt the user
                          to select the language interactively. Default: true

                        • labels={true/false} Filter unused labels from the
                          output. Default: true

                        • directives={true/false} Filter assembler directives
                          from the output. Default: true

                        • libraryCode={true/false} Filter functions from other
                          libraries from the output. Default: true

                        • commentOnly={true/false} Remove all lines which are
                          only comments from the output. Default: true

                        • demangle={true/false} Demangle identifiers. Default:
                          true

                        • intel={true/false} If true, use intel syntax,
                          otherwise use AT&T syntax. Default: true

                        • trim={true/false} Trim intra line whitespace.
                          Default: false

                        • binary={true/false} Compile to binary and
                          disassemble the output. Address and opcodes are show
                          as virtual text over and after every output line.
                          Default: false

                        • execute={true/false} TODO: not implented.

:CECompile! {args}                                               *:CECompile!*
                        Similar to |:CECompile| but creates a new window
                        insted of reusing the last one created.

                        Options: Same as |:CECompile|

                                                              
:CECompileLive {args}                                         *:CECompileLive*
                        Run |:CECompile| after every |BufwritePost| event.

                        Options: Same as |:CECompile|
                                                                   
:CEFormat                                                          *:CEFormat*
                        Format the source code found in the current buffer
                        with a formatter selected by the user.

:CEAddLibrary                                                  *:CEAddLibrary*
                        Add a library interactively to be used in future calls
                        of |:CECompile|. If you add the same library
                        repeatedly, only the last version will be used.

:CELoadExample                                                *:CELoadExample*
                        Load an existing code example to a new tab.

                                                             
:CEOpenWebsite                                               *:CEOpenWebsite!*
                        Open the website with the local source code and
                        compiler configurations. Works with multiple source
                        code windows.
                        

These commands are local to the assembly output buffers.

:CEShowTooltip                                                *:CEShowTooltip*
                        Show information about a specific instruction under
                        cursor. Not all architectures support this feature.

:CEGotoLabel                                                    *:CEGotoLabel*
                        Jumps to the label definition under cursor.

==============================================================================
CONFIGURATION

The plugin works out of the box without any configuration. If you want to
change some of the options, you can do so through the setup() function. All
the possible options can be found in the config.lua module in the source repo.

Example:

require("compiler-explorer").setup({
  url = "https://godbolt.org",
  infer_lang = true, -- Try to infer possible language based on file extension.
  binary_hl = "Comment", -- Highlight group for binary extmarks/virtual text.
  autocmd = {
    enable = false, -- Enable assembly to source and source to assembly highlighting.
    hl = "Cursorline", -- Highlight group used for line match highlighting.
  },
  diagnostics = { -- vim.diagnostic.config() options for the ce-diagnostics namespace.
    underline = false,
    virtual_text = false,
    signs = false,
  },
  split = "split", -- How to split the window after the second compile (split/vsplit).
  spinner_frames = { "⣼", "⣹", "⢻", "⠿", "⡟", "⣏", "⣧", "⣶" }, -- Compiling... spinner settings.
  spinner_interval = 100,
  compiler_flags = "", -- Default flags passed to the compiler.
  job_timeout = 25000, -- Timeout for libuv job in milliseconds. (25s)
  languages = { -- Language specific default compiler/flags
    c = {
      compiler = "g121",
      compiler_flags = "-O2 -Wall",
    },
  },
})


vim:tw=78:et:ft=help:norl:
